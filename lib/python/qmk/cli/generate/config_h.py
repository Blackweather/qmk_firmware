"""Used by the make system to generate info_config.h from info.json.
"""
from pathlib import Path
from shutil import copyfile
import json

from milc import cli

from qmk.datetime import current_datetime
from qmk.decorators import automagic_keyboard, automagic_keymap
from qmk.info import info_json
from qmk.keyboard import list_keyboards
from qmk.path import is_keyboard

usb_properties = {
    'vid': 'VENDOR_ID',
    'pid': 'PRODUCT_ID',
    'device_ver': 'DEVICE_VER',
    'manufacturer': 'MANUFACTURER',
    'product': 'PRODUCT'
}


@cli.argument('-kb', '--keyboard', help='Keyboard to generate config.h for.')
@cli.subcommand('Used by the make system to generate info_config.h from info.json', hidden=True)
@automagic_keyboard
@automagic_keymap
def generate_config_h(cli):
    """Generates the info_config.h file.
    """
    # Determine our keyboard(s)
    if not cli.config.generate_config_h.keyboard:
        cli.log.error('Missing paramater: --keyboard')
        cli.subcommands['info'].print_help()
        return False

    if not is_keyboard(cli.config.generate_config_h.keyboard):
        cli.log.error('Invalid keyboard: "%s"', cli.config.generate_config_h.keyboard)
        return False

    # Build the info.json file
    kb_info_json = info_json(cli.config.generate_config_h.keyboard)

    config_h_lines = [
        '/* This file was generated by `qmk generate-config-h`. Do not edit or copy.'
        ' */',
        '',
        '#pragma once'
    ]

    if 'diode_direction' in kb_info_json:
        config_h_lines.append('')
        config_h_lines.append('#ifndef DIODE_DIRECTION')
        config_h_lines.append('#    define DIODE_DIRECTION ' + kb_info_json['diode_direction'])
        config_h_lines.append('#endif // DIODE_DIRECTION')


    if 'matrix_size' in kb_info_json:
        for info_name, config_name in (('rows', 'MATRIX_ROWS'), ('cols', 'MATRIX_COLS')):
            if info_name in kb_info_json['matrix_size']:
                config_h_lines.append('')
                config_h_lines.append('#ifndef ' + config_name)
                config_h_lines.append('#    define %s %s' % (config_name, kb_info_json['matrix_size'][info_name]))
                config_h_lines.append('#endif // ' + config_name)

    if 'usb' in kb_info_json:
        for info_name, config_name in usb_properties.items():
            if info_name in kb_info_json['usb']:
                config_h_lines.append('')
                config_h_lines.append('#ifndef ' + config_name)
                config_h_lines.append('#    define %s %s' % (config_name, kb_info_json['usb'][info_name]))
                config_h_lines.append('#endif // ' + config_name)

    # Show the results
    print('\n'.join(config_h_lines))
